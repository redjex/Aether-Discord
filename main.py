import sys
import subprocess
import os
import time
import ctypes
import webbrowser
import psutil
from PySide6.QtWidgets import QApplication, QMessageBox
from PySide6.QtGui import QIcon
from PySide6.QtCore import QTimer, QThread, Signal
from design import CustomWindow

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

class WorkerThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ñ–æ–Ω–µ"""
    finished = Signal()
    error = Signal(str)
    
    def __init__(self, operation, *args, **kwargs):
        super().__init__()
        self.operation = operation
        self.args = args
        self.kwargs = kwargs
    
    def run(self):
        try:
            self.operation(*self.args, **self.kwargs)
            self.finished.emit()
        except Exception as e:
            self.error.emit(str(e))

def run_as_admin():
    try:
        script = os.path.abspath(sys.argv[0])
        params = ' '.join([script] + sys.argv[1:])
        
        python_exe = sys.executable
        if python_exe.endswith('python.exe'):
            pythonw_exe = python_exe.replace('python.exe', 'pythonw.exe')
        elif python_exe.endswith('pythonw.exe'):
            pythonw_exe = python_exe
        else:
            pythonw_exe = python_exe
        
        ctypes.windll.shell32.ShellExecuteW(
            None, 
            "runas", 
            pythonw_exe, 
            params, 
            None, 
            0
        )
        sys.exit(0)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        sys.exit(1)

class MainWindow(CustomWindow):
    
    def __init__(self):
        super().__init__()
        
        self.process = None
        self.worker_thread = None
        self.is_switch_locked = False
        
        self.main_switch.toggled.connect(self.on_main_switch_toggled)
        self.github_button.clicked.connect(self.open_github)
        self.telegram_button.clicked.connect(self.open_telegram)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ—Ç–æ–¥–∞
        self.main_button.clicked.connect(self.on_main_method_selected)
        self.alt_button.clicked.connect(self.on_alt_method_selected)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ winws.exe
        self.process_check_timer = QTimer(self)
        self.process_check_timer.timeout.connect(self.check_winws_process)
        self.process_check_timer.start(1000)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    def check_winws_process(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å winws.exe –∏ –º–µ–Ω—è–µ—Ç –∏–∫–æ–Ω–∫—É"""
        is_running = self.is_winws_running()
        
        # –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –ø–æ–ª–∑—É–Ω–∫–µ
        self.main_switch.set_process_running(is_running)
    
    def is_winws_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å winws.exe"""
        try:
            for proc in psutil.process_iter(['name']):
                if proc.info['name'].lower() == 'winws.exe':
                    return True
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return False
    
    def open_github(self):
        webbrowser.open("https://github.com/redjex")
    
    def open_telegram(self):
        webbrowser.open("https://t.me/aether_discord")

    def kill_discord_processes(self):
        discord_processes = ['discord.exe', 'Discord.exe', 'DiscordPTB.exe', 'DiscordCanary.exe']
        
        print("–ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã Discord...")
        
        for process_name in discord_processes:
            try:
                result = subprocess.run(
                    f'taskkill /F /IM {process_name}',
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    creationflags=subprocess.CREATE_NO_WINDOW,
                    text=True
                )
                
                if result.returncode == 0:
                    print(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ {process_name}: {e}")
        
        time.sleep(2)
        print("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Discord –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    
    def on_main_method_selected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
        print("–í—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.kill_all_processes()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º switch –≤ OFF
        self.main_switch.blockSignals(True)
        self.main_switch.set_checked(False)
        self.main_switch.blockSignals(False)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        self.switch_to_main_method()
    
    def on_alt_method_selected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
        print("–í—ã–±—Ä–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.kill_all_processes()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º switch –≤ OFF
        self.main_switch.blockSignals(True)
        self.main_switch.set_checked(False)
        self.main_switch.blockSignals(False)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        self.switch_to_alt_method()
    
    def on_main_switch_toggled(self, checked):
        if self.is_switch_locked:
            print("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏...")
            self.main_switch.blockSignals(True)
            self.main_switch.animation.stop()
            self.main_switch._checked = not checked
            if not checked:
                self.main_switch._handle_position = self.main_switch.width - self.main_switch.handle_radius * 2 - self.main_switch.handle_margin
            else:
                self.main_switch._handle_position = self.main_switch.handle_margin
            self.main_switch.update()
            self.main_switch.update_icon_position()
            self.main_switch.update_icon()
            self.main_switch.blockSignals(False)
            return
        
        self.is_switch_locked = True
        self.main_switch.setEnabled(False)
        print(f"üîí –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 500 –º—Å")
        
        if checked:
            print("–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ–Ω–µ...")
            self.worker_thread = WorkerThread(self._start_processes_background)
            self.worker_thread.finished.connect(self.on_start_finished)
            self.worker_thread.error.connect(self.on_operation_error)
            self.worker_thread.start()
        else:
            print("–ì–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: –í–´–ö–õ–Æ–ß–ï–ù (OFF)")
            self.worker_thread = WorkerThread(self._stop_processes_background)
            self.worker_thread.finished.connect(self.on_stop_finished)
            self.worker_thread.error.connect(self.on_operation_error)
            self.worker_thread.start()
        
        QTimer.singleShot(500, self.unlock_switch)
    
    def _start_processes_background(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.kill_discord_processes()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π bat —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞—Ç—å
        if self.is_alternative_mode:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–∑ dropdown
            bat_file = self.selected_bat_file
        else:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º - –≤—Å–µ–≥–¥–∞ general (ALT).bat
            bat_file = "general (ALT).bat"
        
        bat_path = os.path.abspath(f"general/{bat_file}")
        
        if os.path.exists(bat_path):
            try:
                startupinfo = subprocess.STARTUPINFO()
                startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                startupinfo.wShowWindow = subprocess.SW_HIDE
                
                self.process = subprocess.Popen(
                    ['cmd', '/c', bat_path],
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    creationflags=subprocess.CREATE_NO_WINDOW | subprocess.CREATE_NEW_PROCESS_GROUP,
                    startupinfo=startupinfo,
                    cwd=os.path.dirname(bat_path)
                )
                
                print(f"–ó–∞–ø—É—â–µ–Ω —Ñ–∞–π–ª: {bat_path} (PID: {self.process.pid})")
                time.sleep(2)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞: {e}")
                raise e
        else:
            error_msg = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {bat_path}"
            print(error_msg)
            raise FileNotFoundError(error_msg)
    
    def on_start_finished(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"""
        print("–ü—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã")
    
    def unlock_switch(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        self.is_switch_locked = False
        self.main_switch.setEnabled(True)
        print("üîì –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    def _stop_processes_background(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.kill_all_processes()
    
    def on_stop_finished(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"""
        print("–ü—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def on_operation_error(self, error_msg):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ: {error_msg}")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{error_msg}")
    
    def kill_all_processes(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        try:
            print("–ó–∞–≤–µ—Ä—à–∞—é –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã winws.exe
            result = subprocess.run(
                'taskkill /F /IM winws.exe',
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NO_WINDOW,
                text=True
            )
            
            if result.returncode == 0:
                print("‚úì –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã winws.exe —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            else:
                print("‚úì –ü—Ä–æ—Ü–µ—Å—Å—ã winws.exe –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã cmd.exe —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å bat —Ñ–∞–π–ª–∞–º–∏
            subprocess.run(
                'taskkill /F /FI "WINDOWTITLE eq zapret*"',
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NO_WINDOW,
                text=True
            )
            print("‚úì –ü—Ä–æ—Ü–µ—Å—Å—ã cmd.exe –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å BAT –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.process is not None:
                try:
                    pid = self.process.pid
                    subprocess.run(
                        f'taskkill /F /T /PID {pid}',
                        shell=True,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    print(f"‚úì –ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å BAT —Å PID: {pid}")
                except:
                    pass
                
                self.process = None
            
            print("‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self.process_check_timer.stop()
        self.kill_all_processes()
        event.accept()

def main():
    if not is_admin():
        run_as_admin()
    
    app = QApplication(sys.argv)
    
    window = MainWindow()
    window.setWindowTitle("Aether")
    
    icon_path = "img/aether.ico"
    if os.path.exists(icon_path):
        window.setWindowIcon(QIcon(icon_path))
    
    window.show()
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()